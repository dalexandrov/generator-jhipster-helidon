
# <%= baseName %>
<%_
let clientPackageMngrName = 'Npm';
let clientPackageMngrAddGlobal = 'install -g';
let clientPackageMngrAdd = 'install --save --save-exact';
let clientPackageMngrAddDev = 'install --save-dev --save-exact';
if (clientPackageManager === 'yarn') {
    clientPackageMngrName = 'Yarn';
    clientPackageMngrAddGlobal = 'global add';
    clientPackageMngrAdd = 'add --exact';
    clientPackageMngrAddDev = 'add --dev --exact';
}
let DOCUMENTATION_ARCHIVE_URL = `${DOCUMENTATION_URL + DOCUMENTATION_ARCHIVE_PATH}v${jhipsterVersion}`;
_%>
This application was generated using JHipster <%= jhipsterVersion %> and JHipster Helidon <%= jhipsterHelidonVersion %>, you can find documentation and help at [<%= DOCUMENTATION_ARCHIVE_URL %>](<%= DOCUMENTATION_ARCHIVE_URL %>).

## Development

<%_ if (skipClient) { _%>
To start your application in the dev profile, run:

    <% if (buildTool === 'maven') { %>./mvnw<% } %>

<%_ } _%>
<%_ if (!skipClient) { _%>
Before you can build this project, you must install and configure the following dependencies on your machine:

1. [Node.js][]: We use Node to run a development web server and build the project.
   Depending on your system, you can install Node either from source or as a pre-packaged bundle.
<%_ if (clientPackageManager === 'yarn') { _%>
2. [Yarn][]: We use Yarn to manage Node dependencies.
   Depending on your system, you can install Yarn either from source or as a pre-packaged bundle.
<%_ } _%>

After installing Node, you should be able to run the following command to install development tools.
You will only need to run this command when dependencies change in [package.json](package.json).

    <%= clientPackageManager %> install

We use <%= clientPackageManager %> scripts and [Webpack][] as our build system.

Run the following commands in two separate terminals to create a blissful development experience where your browser
auto-refreshes when files change on your hard drive.
<% if (buildTool === 'maven') { %>
    ./mvnw<% } %>
    <%= clientPackageManager %> start

<%= clientPackageMngrName %> is also used to manage CSS and JavaScript dependencies used in this application. You can upgrade dependencies by
specifying a newer version in [package.json](package.json). You can also run `<%= clientPackageManager %> update` and `<%= clientPackageManager %> install` to manage dependencies.
Add the `help` flag on any command to see how you can use it. For example, `<%= clientPackageManager %> help update`.

The `<%= clientPackageManager %> run` command will list all of the scripts available to run for this project.
<%_ if (authenticationType === 'oauth2') { _%>

## OAuth 2.0 / OpenID Connect

Congratulations! You've selected an excellent way to secure your JHipster application. If you're not sure what OAuth and OpenID Connect (OIDC) are, please see [What the Heck is OAuth?](https://developer.okta.com/blog/2017/06/21/what-the-heck-is-oauth)

To log in to your app, you'll need to have [Keycloak](https://keycloak.org) up and running. The JHipster Team has created a Docker container for you that has the default users and roles. Start Keycloak using the following command.

```
docker-compose -f src/main/docker/keycloak.yml up
```

The security settings in `src/main/resources/META-INF/microprofile-config.properties` are configured for this image.

```properties
helidon.oidc.enabled=true
helidon.oidc.auth-server-url=http://localhost:9080/auth/realms/jhipster/
helidon.oidc.client-id=web_app
helidon.oidc.credentials.secret=web_app
helidon.oidc.authentication.scopes=profile,address,email,address,phone,offline_access
helidon.oidc.application-type=hybrid
helidon.oidc.authentication.cookie-path=/
helidon.oidc.authentication.redirect-path=/login/oauth2/code/oidc
helidon.oidc.authentication.restore-path-after-redirect=false

jhipster.oidc.logout-url=http://localhost:9080/auth/realms/jhipster/protocol/openid-connect/logout
```

### Okta

If you'd like to use Okta instead of Keycloak, it's pretty quick using the [Okta CLI](https://cli.okta.com/). After you've installed it, run:

```shell
okta register
```
Then, in your JHipster app's directory, run `okta apps create` and select **JHipster**.
This will set up an Okta app for you, create `ROLE_ADMIN` and `ROLE_USER` groups, create a `.okta.env` file with your Okta settings, and configure a `groups` claim in your ID token.

Note: As for now, in a JHipster context, the generated `.okta.env` is Spring oriented.
```shell
cat .okta.env
export SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET="{clientSecret}"
export SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI="{yourOktaDomain}"
export SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID="{clientId}"
```

You can use the above environment variables in your `src/main/resources/META-INF/microprofile-config.properties` (or copy/paste the Okta settings values).

```properties
helidon.oidc.auth-server-url=${SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI}
helidon.oidc.client-id=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID}
helidon.oidc.credentials.secret=${SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET)

jhipster.oidc.logout-url=https://{yourOktaDomain}/oauth2/default/v1/logout
```

Run `source .okta.env` and start your app with Maven. You should be able to sign in with the credentials you registered with.
If you're on Windows, you should install [WSL](https://docs.microsoft.com/en-us/windows/wsl/install-win10) so the `source` command will work.

If you'd like to configure things manually through the Okta developer console, see the instructions below.

First, you'll need to create a free developer account at <https://developer.okta.com/signup/>. After doing so, you'll get your own Okta domain, that has a name like `https://dev-123456.okta.com`.

Modify `src/main/resources/META-INF/microprofile-config.properties` to use your Okta settings.

```properties
helidon.oidc.auth-server-url=https://{yourOktaDomain}/oauth2/default
helidon.oidc.client-id={clientId}
helidon.oidc.credentials.secret={clientSecret}

jhipster.oidc.logout-url=https://{yourOktaDomain}/oauth2/default/v1/logout
```

Create an OIDC App in Okta to get a `{clientId}` and `{clientSecret}`. To do this, log in to your Okta Developer account and navigate to **Applications** > **Add Application**. Click **Web** and click the **Next** button. Give the app a name youâ€™ll remember, specify `http://localhost:8080` as a Base URI, and `http://localhost:8080/login/oauth2/code/oidc` as a Login Redirect URI. Click **Done**, then Edit and add `http://localhost:8080` as a Logout redirect URI. Copy and paste the client ID and secret into your `META-INF/microprofile-config.properties` file.

Create a `ROLE_ADMIN` and `ROLE_USER` group and add users into them. Modify e2e tests to use this account when running integration tests. You'll need to change credentials in `src/test/javascript/e2e/account/account.spec.ts` and `src/test/javascript/e2e/admin/administration.spec.ts`.

Navigate to **API** > **Authorization Servers**, click the **Authorization Servers** tab and edit the default one. Click the **Claims** tab and **Add Claim**. Name it "groups", and include it in the ID Token. Set the value type to "Groups" and set the filter to be a Regex of `.*`.

After making these changes, you should be good to go! If you have any issues, please post them to [Stack Overflow](https://stackoverflow.com/questions/tagged/jhipster). Make sure to tag your question with "jhipster" and "okta".
<%_ } _%>

### PWA Support

JHipster ships with PWA (Progressive Web App) support, and it's turned off by default. One of the main components of a PWA is a service worker.

The service worker initialization code is commented out by default. To enable it, uncomment the following code in `src/main/webapp/index.html`:

```html
<script>
    if ('serviceWorker' in navigator) {
        navigator.serviceWorker
        .register('./service-worker.js')
        .then(function() { console.log('Service Worker Registered'); });
    }
</script>
```

Note: [Workbox](https://developers.google.com/web/tools/workbox/) powers JHipster's service worker. It dynamically generates the `service-worker.js` file.

### Managing dependencies

For example, to add [Leaflet][] library as a runtime dependency of your application, you would run following command:

    <%= clientPackageManager %> <%= clientPackageMngrAdd %> leaflet

To benefit from TypeScript type definitions from [DefinitelyTyped][] repository in development, you would run following command:

    <%= clientPackageManager %> <%= clientPackageMngrAddDev %> @types/leaflet

Then you would import the JS and CSS files specified in library's installation instructions so that [Webpack][] knows about them:
<%_ if (clientFramework === ANGULAR) { _%>
Edit [<%= CLIENT_MAIN_SRC_DIR %>app/vendor.ts](<%= CLIENT_MAIN_SRC_DIR %>app/vendor.ts) file:
~~~
import 'leaflet/dist/leaflet.js';
~~~

Edit [<%= CLIENT_MAIN_SRC_DIR %>content/scss/vendor.scss](<%= CLIENT_MAIN_SRC_DIR %>content/scss/vendor.scss) file:
~~~
@import '~leaflet/dist/leaflet.css';
~~~
<%_ } _%>
Note: There are still a few other things remaining to do for Leaflet that we won't detail here.
<%_ } _%>

For further instructions on how to develop with JHipster, have a look at [Using JHipster in development][].

<%_ if (clientFramework === ANGULAR && applicationType !== 'microservice') { _%>
### Using Angular CLI

You can also use [Angular CLI][] to generate some custom client code.

For example, the following command:

    ng generate component my-component

will generate few files:

    create <%= CLIENT_MAIN_SRC_DIR %>app/my-component/my-component.component.html
    create <%= CLIENT_MAIN_SRC_DIR %>app/my-component/my-component.component.ts
    update <%= CLIENT_MAIN_SRC_DIR %>app/app.module.ts
<%_ } _%>
<%_ if (enableSwaggerCodegen) { _%>
### Doing API-First development using openapi-generator

[OpenAPI-Generator]() is configured for this application. You can generate API code from the `src/main/resources/swagger/api.yml` definition file by running:
    <%_ if (buildTool === 'maven') { _%>
```bash
./mvnw generate-sources
```
    <%_ } _%>

Then implements the generated delegate classes with `@Service` classes.

To edit the `api.yml` definition file, you can use a tool such as [Swagger-Editor](). Start a local instance of the swagger-editor using docker by running: `docker-compose -f src/main/docker/swagger-editor.yml up -d`. The editor will then be reachable at [http://localhost:7742](http://localhost:7742).

Refer to [Doing API-First development][] for more details.
<%_ } _%>

## Building for production

### Packaging as thin jar

To build the final jar and optimize the <%= baseName %> application for production, run:
<%_ if (buildTool === 'maven') { _%>
```
./mvnw -Pprod clean package
```
<%_ } _%>


<%_ if (!skipClient) { _%>
This will concatenate and minify the client CSS and JavaScript files. It will also modify `index.html` so it references these new files.
<%_ } _%>
To ensure everything worked, run:
<% if (buildTool === 'maven') { %>
    java -jar target/helidon-app/*.jar<% } %>

<% if (!skipClient) { %>Then navigate to [http://localhost:<%= serverPort %>](http://localhost:<%= serverPort %>) in your browser.
<% } %>
Refer to [Using JHipster in production][] for more details.

### Packaging as native executable

*Targeting your Operation System*
In order to build a native image locally, your need to have [GraalVM](https://www.graalvm.org/) installed and `GRAALVM_HOME` defined.
You can use the `native` profile as follow to build native executable.
<%_ if (buildTool === 'maven') { _%>
```
./mvnw package -Pnative-image
```
<%_ } _%>

Keep in mind that the generated native executable is dependent on your Operating System.

*Targeting a container environment*
If you plan to run your application in a container, run:
<%_ if (buildTool === 'maven') { _%>
```
./mvnw package -Dnative-image
```
<%_ } _%>

It will use a Docker container with GraalVM installed and produce an 64 bit Linux executable.

## Testing

To launch your application's tests, run:

    <%_ if (buildTool === 'maven') { _%>
    ./mvnw verify
    <%_ } _%>
<% if (!skipClient) { %>
### Client tests

Unit tests are run by [Jest][] and written with [Jasmine][]. They're located in [<%= CLIENT_TEST_SRC_DIR %>](<%= CLIENT_TEST_SRC_DIR %>) and can be run with:

    <%= clientPackageManager %> test

<% if (protractorTests) { %>UI end-to-end tests are powered by [Protractor][], which is built on top of WebDriverJS. They're located in [<%= CLIENT_TEST_SRC_DIR %>e2e](<%= CLIENT_TEST_SRC_DIR %>e2e)
and can be run by starting Helidon in one terminal (`<% if (buildTool === 'maven') { %>./mvnw <% } %>`) and running the tests (`<%= clientPackageManager %> run e2e`) in a second one.<% } %>
<% } %><% if (gatlingTests) { %>### Other tests

Performance tests are run by [Gatling][] and written in Scala. They're located in [src/test/gatling](src/test/gatling).

To use those tests, you must install Gatling from [https://gatling.io/](https://gatling.io/).
<% } %>
For more information, refer to the [Running tests page][].

## Using Docker to simplify development (optional)

You can use Docker to improve your JHipster development experience. A number of docker-compose configuration are available in the [src/main/docker](src/main/docker) folder to launch required third party services.
<% if (databaseType !== 'no') { %>
For example, to start a <%= prodDatabaseType %> database in a docker container, run:

    docker-compose -f src/main/docker/<%= prodDatabaseType %>.yml up -d

To stop it and remove the container, run:

    docker-compose -f src/main/docker/<%= prodDatabaseType %>.yml down
<% } %>

[JHipster Homepage and latest documentation]: <%= DOCUMENTATION_URL %>
[JHipster <%= jhipsterVersion %> archive]: <%= DOCUMENTATION_ARCHIVE_URL %>
[Using JHipster in development]: <%= DOCUMENTATION_ARCHIVE_URL %>/development/
[Using Docker and Docker-Compose]: <%= DOCUMENTATION_ARCHIVE_URL %>/docker-compose
[Using JHipster in production]: <%= DOCUMENTATION_ARCHIVE_URL %>/production/
[Running tests page]: <%= DOCUMENTATION_ARCHIVE_URL %>/running-tests/
[Code quality page]: <%= DOCUMENTATION_ARCHIVE_URL %>/code-quality/
[Setting up Continuous Integration]: <%= DOCUMENTATION_ARCHIVE_URL %>/setting-up-ci/

<% if (testFrameworks.includes("gatling")) { %>[Gatling]: https://gatling.io/<% } %>
<%_ if (!skipClient) { _%>
[Node.js]: https://nodejs.org/
[Yarn]: https://yarnpkg.org/
[Webpack]: https://webpack.github.io/
[Angular CLI]: https://cli.angular.io/
[BrowserSync]: https://www.browsersync.io/
[Jest]: https://facebook.github.io/jest/
[Jasmine]: https://jasmine.github.io/2.0/introduction.html
[Protractor]: https://angular.github.io/protractor/
[Leaflet]: https://leafletjs.com/
[DefinitelyTyped]: https://definitelytyped.org/
<%_ } _%>
<%_ if (enableSwaggerCodegen) { _%>
[OpenAPI-Generator]: https://openapi-generator.tech
[Swagger-Editor]: https://editor.swagger.io
[Doing API-First development]: <%= DOCUMENTATION_ARCHIVE_URL %>/doing-api-first-development/
<%_ } _%>
