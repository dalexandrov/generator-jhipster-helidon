<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.web.rest;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.inject.Inject;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;
import java.lang.management.ManagementFactory;
import java.lang.management.ThreadInfo;
import java.util.*;
import java.util.concurrent.TimeUnit;

/**
 * <p>JHipsterMetricsEndpoint class.</p>
 */
@Path("/management")
@Produces(MediaType.APPLICATION_JSON)
public class JHipsterMetricsEndpoint {

    private final Logger logger = LoggerFactory.getLogger(JHipsterMetricsEndpoint.class);

    /** Constant <code>MISSING_NAME_TAG_MESSAGE="Missing name tag for metric {}"</code> */
    public static final String MISSING_NAME_TAG_MESSAGE = "Missing name tag for metric {}";

    final MeterRegistry meterRegistry;

    /**
     * <p>Constructor for JHipsterMetricsEndpoint.</p>
     *
     */
    @Inject
    public JHipsterMetricsEndpoint(MeterRegistry meterRegistry) {
        this.meterRegistry = meterRegistry;
    }

    /**
     * GET /management/jhi-metrics
     * <p>
     * Give metrics displayed on Metrics page
     *
     * @return a Map with a String defining a category of metrics as Key and
     * another Map containing metrics related to this category as Value
     */
    @GET
    @Path("/jhimetrics")
    public Map<String, Map> allMetrics() {

        Map<String, Map> results = new HashMap<>();
        // JVM stats
        results.put("jvm", this.jvmMemoryMetrics());
        // HTTP requests stats
        results.put("http.server.requests", this.httpRequestsMetrics());
        // Service stats
        results.put("services", this.serviceMetrics());
        // Garbage collector
        results.put("garbageCollector", this.garbageCollectorMetrics());
        // Process stats
        results.put("processMetrics", this.processMetrics());

        return results;
    }

    @GET
    @Path("/threaddump")
    public Map<String, List<ThreadInfo>> getThreadDump() {
        var threads = Arrays.asList(ManagementFactory.getThreadMXBean().dumpAllThreads(true, true));
        return Map.of("threads", threads);
    }

    private Map<String, Number> processMetrics() {
        Map<String, Number> resultsProcess = new HashMap<>();

        Collection<Gauge> gauges = Search.in(this.meterRegistry).name(s -> s.contains("cpu") || s.contains("system") || s.contains("process")).gauges();
        gauges.forEach(gauge -> resultsProcess.put(gauge.getId().getName(), gauge.value()));

        Collection<TimeGauge> timeGauges = Search.in(this.meterRegistry).name(s -> s.contains("process")).timeGauges();
        timeGauges.forEach(gauge -> resultsProcess.put(gauge.getId().getName(), gauge.value(TimeUnit.MILLISECONDS)));

        return resultsProcess;
    }

    private Map<String, Object> garbageCollectorMetrics() {
        Map<String, Object> resultsGarbageCollector = new HashMap<>();

        Collection<Timer> timers = Search.in(this.meterRegistry).name(s -> s.contains("jvm.gc.pause")).timers();
        timers.forEach(timer -> {
            String key = timer.getId().getName();

            HashMap<String, Number> gcPauseResults = new HashMap<>();
            gcPauseResults.put("count", timer.count());
            gcPauseResults.put("max", timer.max(TimeUnit.MILLISECONDS));
            gcPauseResults.put("totalTime", timer.totalTime(TimeUnit.MILLISECONDS));
            gcPauseResults.put("mean", timer.mean(TimeUnit.MILLISECONDS));

            ValueAtPercentile[] percentiles = timer.takeSnapshot().percentileValues();
            for (ValueAtPercentile percentile : percentiles) {
                gcPauseResults.put(String.valueOf(percentile.percentile()), percentile.value(TimeUnit.MILLISECONDS));
            }

            resultsGarbageCollector.putIfAbsent(key, gcPauseResults);
        });
        resultsGarbageCollector.putIfAbsent("jvm.gc.pause", new HashMap<>());

        Collection<Gauge> gauges = Search.in(this.meterRegistry).name(s -> s.contains("jvm.gc") && !s.contains("jvm.gc.pause")).gauges();
        gauges.forEach(gauge -> resultsGarbageCollector.put(gauge.getId().getName(), gauge.value()));

        Collection<Counter> counters = Search.in(this.meterRegistry).name(s -> s.contains("jvm.gc") && !s.contains("jvm.gc.pause")).counters();
        counters.forEach(counter -> resultsGarbageCollector.put(counter.getId().getName(), counter.count()));

        gauges = Search.in(this.meterRegistry).name(s -> s.contains("jvm.classes.loaded")).gauges();
        Double classesLoaded = gauges.stream().map(Gauge::value).reduce((x, y) -> (x + y)).orElse((double) 0);
        resultsGarbageCollector.put("classesLoaded", classesLoaded);

        Collection<FunctionCounter> functionCounters = Search.in(this.meterRegistry).name(s -> s.contains("jvm.classes.unloaded")).functionCounters();
        Double classesUnloaded = functionCounters.stream().map(FunctionCounter::count).reduce((x, y) -> (x + y)).orElse((double) 0);
        resultsGarbageCollector.put("classesUnloaded", classesUnloaded);

        return resultsGarbageCollector;
    }

    private Map<String, Map> serviceMetrics() {
        Collection<String> crudOperation = Arrays.asList("GET", "POST", "PUT", "DELETE");

        Set<String> uris = new HashSet<>();
        Collection<Timer> timers = this.meterRegistry.find("http.server.requests").timers();

        timers.forEach(timer -> uris.add(timer.getId().getTag("uri")));
        Map<String, Map> resultsHttpPerUri = new HashMap<>();

        uris.forEach(uri -> {
            Map<String, Map> resultsPerUri = new HashMap<>();

            crudOperation.forEach(operation -> {
                Map<String, Number> resultsPerUriPerCrudOperation = new HashMap<>();

                Collection<Timer> httpTimersStream = this.meterRegistry.find("http.server.requests").tags("uri", uri, "method", operation).timers();
                long count = httpTimersStream.stream().map(Timer::count).reduce((x, y) -> x + y).orElse(0L);

                if (count != 0) {
                    double max = httpTimersStream.stream().map(x -> x.max(TimeUnit.MILLISECONDS)).reduce((x, y) -> x > y ? x : y).orElse((double) 0);
                    double totalTime = httpTimersStream.stream().map(x -> x.totalTime(TimeUnit.MILLISECONDS)).reduce((x, y) -> (x + y)).orElse((double) 0);

                    resultsPerUriPerCrudOperation.put("count", count);
                    resultsPerUriPerCrudOperation.put("max", max);
                    resultsPerUriPerCrudOperation.put("mean", totalTime / count);

                    resultsPerUri.put(operation, resultsPerUriPerCrudOperation);
                }
            });

            resultsHttpPerUri.put(uri, resultsPerUri);
        });

        return resultsHttpPerUri;
    }

    private Map<String, Map<String, Number>> jvmMemoryMetrics() {
        Map<String, Map<String, Number>> resultsJvm = new HashMap<>();

        Search jvmUsedSearch = Search.in(this.meterRegistry).name(s -> s.contains("jvm.memory.used"));

        Collection<Gauge> gauges = jvmUsedSearch.gauges();
        gauges.forEach(gauge -> {
            String key = gauge.getId().getTag("id");
            resultsJvm.putIfAbsent(key, new HashMap<>());
            resultsJvm.get(key).put("used", gauge.value());
        });

        Search jvmMaxSearch = Search.in(this.meterRegistry).name(s -> s.contains("jvm.memory.max"));

        gauges = jvmMaxSearch.gauges();
        gauges.forEach(gauge -> {
            String key = gauge.getId().getTag("id");
            resultsJvm.get(key).put("max", gauge.value());
        });

        gauges = Search.in(this.meterRegistry).name(s -> s.contains("jvm.memory.committed")).gauges();
        gauges.forEach(gauge -> {
            String key = gauge.getId().getTag("id");
            resultsJvm.get(key).put("committed", gauge.value());
        });

        return resultsJvm;
    }

    private Map<String, Map> httpRequestsMetrics() {
        Set<String> statusCode = new HashSet<>();
        Collection<Timer> timers = this.meterRegistry.find("http.server.requests").timers();

        timers.forEach(timer -> statusCode.add(timer.getId().getTag("status")));

        Map<String, Map> resultsHttp = new HashMap<>();
        Map<String, Map<String, Number>> resultsHttpPerCode = new HashMap<>();

        statusCode.forEach(code -> {
            Map<String, Number> resultsPerCode = new HashMap<>();

            Collection<Timer> httpTimersStream = this.meterRegistry.find("http.server.requests").tag("status", code).timers();
            long count = httpTimersStream.stream().map(Timer::count).reduce((x, y) -> x + y).orElse(0L);
            double max = httpTimersStream.stream().map(x -> x.max(TimeUnit.MILLISECONDS)).reduce((x, y) -> x > y ? x : y).orElse((double) 0);
            double totalTime = httpTimersStream.stream().map(x -> x.totalTime(TimeUnit.MILLISECONDS)).reduce((x, y) -> (x + y)).orElse((double) 0);

            resultsPerCode.put("count", count);
            resultsPerCode.put("max", max);
            resultsPerCode.put("mean", count != 0 ? totalTime / count : 0);

            resultsHttpPerCode.put(code, resultsPerCode);
        });

        resultsHttp.put("percode", resultsHttpPerCode);

        timers = this.meterRegistry.find("http.server.requests").timers();
        long countAllrequests = timers.stream().map(Timer::count).reduce((x, y) -> x + y).orElse(0L);
        Map<String, Number> resultsHTTPAll = new HashMap<>();
        resultsHTTPAll.put("count", countAllrequests);

        resultsHttp.put("all", resultsHTTPAll);

        return resultsHttp;
    }

}
