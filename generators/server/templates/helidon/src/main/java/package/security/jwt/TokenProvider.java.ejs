package <%= packageName %>.security.jwt;

import <%= packageName %>.config.JHipsterProperties;
import java.io.InputStream;
import java.security.Key;
import java.security.KeyFactory;
import java.security.PrivateKey;
import java.security.spec.PKCS8EncodedKeySpec;
import java.time.Instant;
import java.util.Base64;
import java.util.Date;
import javax.annotation.PostConstruct;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;

import com.mycompany.myapp.security.SecurityIdentity;
import io.helidon.common.configurable.Resource;
import io.helidon.security.jwt.Jwt;
import io.helidon.security.jwt.SignedJwt;
import io.helidon.security.jwt.jwk.JwkKeys;
import io.helidon.security.jwt.jwk.JwkRSA;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ApplicationScoped
public class TokenProvider {
    private final Logger log = LoggerFactory.getLogger(TokenProvider.class);

    private static final String AUTHORITIES_KEY = "auth"; // Claim JHiptser front-end uses
    public static final String GROUPS_KEY = "groups"; // Default claim for MP-JWT

    private final Key key;

    private final String issuer;

    private final long tokenValidityInMilliseconds;

    private final long tokenValidityInMillisecondsForRememberMe;

    @Inject
    public TokenProvider(JHipsterProperties jHipsterProperties)
        throws Exception {
        this.key = readPrivateKey(jHipsterProperties.getSecurity().authentication.jwt.privateKey.location);
        this.issuer = jHipsterProperties.getSecurity().authentication.jwt.issuer;
        this.tokenValidityInMilliseconds = jHipsterProperties.getSecurity().authentication.jwt.tokenValidityInSeconds * 1000;
        this.tokenValidityInMillisecondsForRememberMe =
        jHipsterProperties.getSecurity().authentication.jwt.tokenValidityInSecondsForRememberMe * 1000;
    }

    @PostConstruct
    void init() throws RuntimeException {}

    public String createToken(SecurityIdentity identity, boolean rememberMe) {
        String authorities = String.join(", ", identity.getRoles());
        long now = (new Date()).getTime();
        Date validity;
        if (rememberMe) {
        validity = new Date(now + tokenValidityInMillisecondsForRememberMe);
        } else {
        validity = new Date(now + tokenValidityInMilliseconds);
        }

        Jwt jwt = Jwt.builder()
        .subject(identity.getLogin())
        .addUserGroup("admin")
        .addScope("admin_scope")
        .algorithm(JwkRSA.ALG_RS256)
        .issuer(this.issuer)
        .audience("http://localhost:8087/jwt")
        .issueTime(Instant.now())
        .userPrincipal(identity.getLogin())
        .keyId("SIGNING_KEY")
        .expirationTime(Instant.ofEpochSecond(validity.getTime()))
        .addPayloadClaim(AUTHORITIES_KEY, authorities)
        .addPayloadClaim(GROUPS_KEY,identity.getRoles())
        .build();

        JwkKeys jwkKeys = JwkKeys.builder()
        .resource(Resource.create("jwt/sign-jwk.json"))
        .build();

        SignedJwt signed = SignedJwt.sign(jwt, jwkKeys.forKeyId("sign-rsa").get());
        String tokenContent = signed.tokenContent();

        return tokenContent;
    }

    public static PrivateKey readPrivateKey(final String pemResName) throws Exception {
        InputStream contentIS = TokenProvider.class.getResourceAsStream(pemResName);
        byte[] tmp = new byte[4096];
        int length = contentIS.read(tmp);
        return decodePrivateKey(new String(tmp, 0, length, "UTF-8"));
    }

    public static PrivateKey decodePrivateKey(final String pemEncoded) throws Exception {
        byte[] encodedBytes = toEncodedBytes(pemEncoded);

        PKCS8EncodedKeySpec keySpec = new PKCS8EncodedKeySpec(encodedBytes);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        return kf.generatePrivate(keySpec);
    }

    private static byte[] toEncodedBytes(final String pemEncoded) {
        final String normalizedPem = removeBeginEnd(pemEncoded);
        return Base64.getDecoder().decode(normalizedPem);
    }

    private static String removeBeginEnd(String pem) {
        pem = pem.replaceAll("-----BEGIN (.*)-----", "");
        pem = pem.replaceAll("-----END (.*)----", "");
        pem = pem.replaceAll("\r\n", "");
        pem = pem.replaceAll("\n", "");
        return pem.trim();
    }
}
