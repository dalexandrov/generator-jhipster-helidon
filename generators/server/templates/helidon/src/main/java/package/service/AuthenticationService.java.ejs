
package <%=packageName%>.service;

import <%=packageName%>.domain.User;
import <%=packageName%>.domain.UserRepository;
import <%=packageName%>.security.BCryptPasswordHasher;
import <%=packageName%>.security.SecurityIdentity;
import <%=packageName%>.security.UserNotActivatedException;
import <%=packageName%>.security.UsernameNotFoundException;

import java.util.Locale;
import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@ApplicationScoped
public class AuthenticationService {
    private final Logger log = LoggerFactory.getLogger(AuthenticationService.class);

    public static final String emailValidator =
        "^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$";

    final BCryptPasswordHasher passwordHasher;
    final UserRepository userRepository;


    @Inject
    public AuthenticationService(BCryptPasswordHasher passwordHasher, UserRepository userRepository) {
        this.passwordHasher = passwordHasher;
        this.userRepository = userRepository;
    }

    public SecurityIdentity authenticate(String login, String password) {
        User user = loadByUsername(login);
        if (!user.activated) {
            throw new UserNotActivatedException("User " + login + " was not activated");
        }
        if (passwordHasher.checkPassword(password, user.password)) {
            return createSecurityIdentity(user);
        }
        log.debug("Authentication failed: password does not match stored value");
        throw new RuntimeException("Authentication failed: password does not match stored value");
    }

    private User loadByUsername(String login) {
        log.debug("Authenticating {}", login);

        if (login.matches(emailValidator)) {

            return userRepository
                .findOneWithAuthoritiesByEmailIgnoreCase(login)
                .orElseThrow(() -> new UsernameNotFoundException("User with email " + login + " was not found in the database"));
        }
        String lowercaseLogin = login.toLowerCase(Locale.ENGLISH);

        return userRepository
            .findOneWithAuthoritiesByLogin(lowercaseLogin)
            .orElseThrow(() -> new UsernameNotFoundException("User " + lowercaseLogin + " was not found in the database"));
    }

    private SecurityIdentity createSecurityIdentity(User user) {
        return new SecurityIdentity(user.login, user.password);
    }
}
