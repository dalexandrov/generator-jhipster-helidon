

package <%= packageName %>.service.mapper;

<%_
let existingMappings = [];
let uuidMapMethod = false;
let byteMapMethod = false;
for (idx in relationships) {
    if ((relationships[idx].relationshipType === 'many-to-many' && relationships[idx].ownerSide === true) || relationships[idx].relationshipType === 'many-to-one' || (relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide === true)) {
        // if the entity is mapped twice, we should implement the mapping once
        if (!existingMappings.includes(relationships[idx].otherEntityNameCapitalized) && asEntity(relationships[idx].otherEntityNameCapitalized) !== asEntity(entityClass)) {
            existingMappings.push(relationships[idx].otherEntityNameCapitalized);
        }
        let otherEntity = getExistingEntities().find(e => e.name === relationships[idx].otherEntityNameCapitalized);
        if (otherEntity) {
            let otherEntityField = otherEntity.definition.fields.find(f => f.fieldName === relationships[idx].otherEntityField);
            if (otherEntityField) {
                if (otherEntityField.fieldType === 'UUID') {
                    uuidMapMethod = true;
                }
                if (otherEntityField.fieldType === 'byte[]') {
                    byteMapMethod = true;
                }
            }
        }
    }
}
_%>

import <%= packageName %>.domain.*;
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>;

import org.mapstruct.*;
<%_ if (uuidMapMethod) { _%>

import java.util.Objects;
import java.util.UUID;
<%_ } _%>

/**
 * Mapper for the entity {@link <%= asEntity(entityClass) %>} and its DTO {@link <%= asDto(entityClass) %>}.
 */
@Mapper(componentModel = "cdi", uses = {<%= existingMappings.map(otherEntityNameCapitalized => otherEntityNameCapitalized + 'Mapper.class').join(', ') %>})
public interface <%= entityClass %>Mapper extends EntityMapper<<%= asDto(entityClass) %>, <%= asEntity(entityClass) %>> {

<%_
// entity -> DTO mapping
var renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const relationshipName = relationships[idx].relationshipName;
    const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
    const ownerSide = relationships[idx].ownerSide;
    if ((relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) && !otherEntityIsEmbedded) {
        renMapAnotEnt = true;
_%>
    @Mapping(source = "<%= relationshipName %>.id", target = "<%= relationships[idx].relationshipFieldName %>Id")
            <%_ if (relationships[idx].otherEntityFieldCapitalized !='Id' && relationships[idx].otherEntityFieldCapitalized !== '') { _%>
    @Mapping(source = "<%= relationshipName %>.<%= relationships[idx].otherEntityField %>", target = "<%= relationships[idx].relationshipFieldName %><%= relationships[idx].otherEntityFieldCapitalized %>")
            <%_ } _%>
        <%_ } _%>
    <%_ } _%>
    <%_ if (renMapAnotEnt === true) { _%>
    <%= asDto(entityClass) %> toDto(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>);
    <%_ } _%>

<%_
// DTO -> entity mapping
var renMapAnotDto = false;  //Render Mapping Annotation during DTO to Entity conversion?
// var hasOAuthUser = false; // if OAuthUser, use a String id in fromId() method
for (idx in relationships) {
    const relationshipType = relationships[idx].relationshipType;
    const relationshipName = relationships[idx].relationshipName;
    const otherEntityIsEmbedded = relationships[idx].otherEntityIsEmbedded;
    const relationshipNamePlural = relationships[idx].relationshipNamePlural;
    const relationshipNameCapitalized = relationships[idx].relationshipNameCapitalized;
    const ownerSide = relationships[idx].ownerSide;
    if ((relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true) && !otherEntityIsEmbedded)) {
        renMapAnotDto = true;
_%>
    @Mapping(source = "<%= relationshipName %>Id", target = "<%= relationshipName %>")
            <%_ } else if (relationshipType === 'many-to-many' && ownerSide === false) { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipNamePlural %>", ignore = true)
            <%_ } else if (relationshipType === 'one-to-many') { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipNamePlural %>", ignore = true)
            <%_ } else if (relationshipType === 'one-to-one' && ownerSide === false) { renMapAnotDto = true; _%>
    @Mapping(target = "<%= relationshipName %>", ignore = true)
            <%_ }
    if ((relationshipType === 'one-to-many' || relationshipType === 'many-to-many') && fluentMethods) { _%>
    @Mapping(target = "remove<%= relationshipNameCapitalized %>", ignore = true)
    <%_ } _%>
    <%_ } _%>
    <%_ if (renMapAnotDto === true) { _%>
    <%= asEntity(entityClass) %> toEntity(<%= asDto(entityClass) %> <%= asDto(entityInstance) %>);
    <%_ } _%>
    <%_ if ((databaseType === 'sql' || databaseType === 'mongodb') && !embedded) { _%>

    default <%= asEntity(entityClass) %> fromId(<%= primaryKeyType %> id) {
        if (id == null) {
            return null;
        }
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %> = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>.id = id;
        return <%= asEntity(entityInstance) %>;
    }
<%_ } _%>
    <%_ if (uuidMapMethod) { _%>

    default String map(UUID value) {
        return Objects.toString(value, null);
    }
    <%_ } _%>
    <%_ if (byteMapMethod) { _%>

    default String map(byte[] value) {
        return new String(value);
    }
    <%_ } _%>
}
