
package <%= packageName %>.service;

<%_ if (hasDto) { _%>
import <%= packageName %>.service.dto.<%= entityOrDtoClass %>;
<%_ } else { _%>
import <%= packageName %>.domain.<%= entityOrDtoClass %>;
<%_ } _%>

<%_ if (fieldsContainNoOwnerOneToOne === true) { _%>
import java.util.List;
<%_ } _%>
import java.util.Optional;

/**
 * Service Interface for managing {@link <%= packageName %>.domain.<%= entityClass %>}.
 */
public interface <%= entityClass %>Service {

    /**
     * Save a <%= entityInstance %>.
     *
     * @param <%= entityOrDtoInstance %> the entity to save.
     * @return the persisted entity.
     */
    <%= entityOrDtoClass %> persistOrUpdate(<%= entityOrDtoClass %> <%= entityOrDtoInstance %>);

    /**
     * Delete the "id" <%= entityOrDtoInstance %>.
     *
     * @param id the id of the entity.
     */
    void delete(<%= primaryKeyType %> id);

    /**
     * Get all the <%= entityInstancePlural %>.
     * @return the list of entities.
     */
    public List<<%= entityOrDtoClass %>> findAll();

    /**
     * Get the "id" <%= entityOrDtoInstance %>.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
    Optional<<%= entityOrDtoClass %>> findOne(<%= primaryKeyType %> id);

    <%_ for (idx in relationships) { _%>
        <%_ if (relationships[idx].relationshipType === 'one-to-one' && relationships[idx].ownerSide !== true) { _%>
    /**
     * Get all the <%= entityOrDtoClass %> where <%= relationships[idx].relationshipNameCapitalized %> is {@code null}.
     *
     * @return the list of entities.
     */
    List<<%= entityOrDtoClass %>> findAllWhere<%= relationships[idx].relationshipNameCapitalized %>IsNull();
        <%_ } _%>
    <%_ } _%>

    <%_ if (fieldsContainOwnerManyToMany === true) { _%>
    /**
     * Get all the <%= entityInstancePlural %> with eager load of many-to-many relationships.
     * @return the list of entities.
    */
    public List<<%= entityOrDtoClass %>> findAllWithEagerRelationships();

    <%_ } _%>

}
