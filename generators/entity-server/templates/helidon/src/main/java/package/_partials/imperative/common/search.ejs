
<%_
    if (pagination === 'no') { %>
    public List<<%= entityOrDtoClass %>> search<%= entityClassPlural %>(@RequestParam String query) {
        log.debug("REST request to search <%= entityClassPlural %> for query {}", query);<%- include('search_stream_template', {viaService: viaService}); -%>
    <% } if (pagination !== 'no') { %>
    public ResponseEntity<List<<%= entityOrDtoClass %>>> search<%= entityClassPlural %>(@RequestParam String query, Pageable pageable<% if (reactive) { %>, ServerHttpRequest request<% } %>) {
        log.debug("REST request to search for a page of <%= entityClassPlural %> for query {}", query);<% if (viaService) { %>
        Page<<%= entityOrDtoClass %>> page = <%= entityInstance %>Service.search(query, pageable);<% } else { %>
        Page<<%= asEntity(entityClass) %>> page = <%= entityInstance %>SearchRepository.search(queryStringQuery(query), pageable);<% } %>
        HttpHeaders headers = PaginationUtil.generatePaginationHttpHeaders(<% if (!reactive) { %>ServletUriComponentsBuilder.fromCurrentRequest()<% } else { %>UriComponentsBuilder.fromHttpRequest(request)<% } %>, page);
        return ResponseEntity.ok().headers(headers).body(<% if (!viaService && dto === 'mapstruct') { %><%= entityToDtoMethodInvocation %>(<% } %>page.getContent()<% if (!viaService && dto === 'mapstruct') { %>)<% } %>);
    <% } -%>
}
