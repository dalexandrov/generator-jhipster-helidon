
package <%=packageName%>.domain;<%
let importApiModelProperty = false;
let importJsonIgnore = false;
let importJsonIgnoreProperties = false;
let importSet = false;
let hasTextBlob = false;
let hasRelationship = relationships.length !== 0;
const uniqueEnums = {};
%>
<%_ include('./imports', {
    fields: fields,
    relationships: relationships,
    importApiModelProperty: importApiModelProperty,
    importJsonIgnore: importJsonIgnore,
    importJsonIgnoreProperties: importJsonIgnoreProperties,
    importSet: importSet,
    uniqueEnums: uniqueEnums
}) _%>
<%_ for (idx in relationships) {
        isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if ( isUsingMapsId === true) {
            primaryKeyType = (relationships[idx].otherEntityName === 'user'  && authenticationType === 'oauth2') ? 'String' : pkType;
            break;
        }
        isUsingMapsId = false;
        if (!importSet && relationships[idx].relationshipType === 'one-to-many' || relationships[idx].relationshipType === 'many-to-many') {
            importSet = true;
        }
    }
    for (idx in fields) {
        if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fields[idx].fieldTypeBlobContent === 'text') {
            hasTextBlob = true;
            break;
        }
    }
_%>
<%_ if (databaseType === 'sql') { _%>

<%_ } _%>
import javax.json.bind.annotation.JsonbTransient;

 if (importJsonIgnore === true) { _%>
 if (enableHibernateCache) { _%>
import org.hibernate.annotations.Cache;
import org.hibernate.annotations.CacheConcurrencyStrategy;
<%_ } if (hasTextBlob === true || (fieldsContainUUID === true && ['mysql', 'mariadb'].includes(prodDatabaseType))) { _%>
import org.hibernate.annotations.Type;
<%_ } if (databaseType === 'mongodb') { _%>

import org.bson.codecs.pojo.annotations.BsonId;
<%_ } else if (databaseType === 'sql') { _%>

import javax.persistence.*;
<%_ } if (validation) { _%>
import javax.validation.constraints.*;
<%_ } _%>

import java.io.Serializable;
<%_ if (fieldsContainBigDecimal === true) { _%>
import java.math.BigDecimal;
<%_ } if (fieldsContainInstant === true) { _%>
import java.time.Instant;
<%_ } if (fieldsContainLocalDate === true) { _%>
import java.time.LocalDate;
<%_ } if (fieldsContainZonedDateTime === true) { _%>
import java.time.ZonedDateTime;
<%_ } if (fieldsContainDuration === true) { _%>
import java.time.Duration;
<%_ } if (importSet === true) { _%>
import java.util.HashSet;
import java.util.Set;
<%_ } if (fieldsContainOwnerManyToMany && (databaseType === 'sql' || databaseType === 'mongodb')) { _%>
import java.util.Optional;
<%_ }
<%_ if (fieldsContainUUID === true) { _%>
import java.util.UUID;
<%_ }
Object.keys(uniqueEnums).forEach(function(element) { _%>

import <%=packageName%>.domain.enumeration.<%= element %>;
<%_ }); _%>

<%_ if (typeof javadoc == 'undefined') { _%>
/**
 * A <%= asEntity(entityClass) %>.
 */
<%_ } else { _%>
<%- formatAsClassJavadoc(javadoc) %>
    <%_ if (!hasDto) { _%>
@ApiModel(description = "<%- formatAsApiDescription(javadoc) %>")
    <%_ }_%>
<%_ } _%>
<%_ if (databaseType === 'sql') { _%>
@Entity
@Table(name = "<%= entityTableName %>")
<%_ if (enableHibernateCache) { _%>
<% if (readOnly) { %>@Cache(usage = CacheConcurrencyStrategy.READ_ONLY)<% } else { %>@Cacheable<% } %>
<%_ } _%>
<%_ } _%>
<%_ if (databaseType === 'mongodb') { _%>
//
<%_ }
public class <%= asEntity(entityClass) %>  implements Serializable {

    private static final long serialVersionUID = 1L;

<%_ if (databaseType === 'sql') { _%>
    @Id
    <%_ if (prodDatabaseType === 'mysql') { _%>
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    <%_ }  else { _%>
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "sequenceGenerator")
    @SequenceGenerator(name = "sequenceGenerator")
    <%_ } _%>
<%_ } _%>

<%_ if (databaseType === 'mongodb') { _%>
    @BsonId
<%_ } _%>
    public <%= pkType %> id;

<%_ for (idx in fields) {
    if (typeof fields[idx].javadoc !== 'undefined') { _%>
<%- formatAsFieldJavadoc(fields[idx].javadoc) %>
    <%_ }
    let required = false;
    let unique = false;
    const fieldValidate = fields[idx].fieldValidate;
    const fieldValidateRules = fields[idx].fieldValidateRules;
    const fieldValidateRulesMaxlength = fields[idx].fieldValidateRulesMaxlength;
    const fieldType = fields[idx].fieldType;
    const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
    const fieldName = fields[idx].fieldName;
    const fieldNameUnderscored = fields[idx].fieldNameUnderscored;
    const fieldNameAsDatabaseColumn = fields[idx].fieldNameAsDatabaseColumn;
    if (fieldValidate === true) {
        if (fieldValidateRules.includes('required')) {
            required = true;
        }
        if (fieldValidateRules.includes('unique')) {
            unique = true;
        } _%>
    <%- include(fetchFromInstalledJHipster('entity-server/templates') + '/src/main/java/package/common/field_validators', {
        idx: idx,
        fields: fields
    }) -%>
    <%_ } _%>
    <%_ if (!hasDto && typeof fields[idx].javadoc != 'undefined') { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(fields[idx].javadoc) %>"<% if (required) { %>, required = true<% } %>)
    <%_ } _%>
    <%_ if (databaseType === 'sql') {
        if (fields[idx].fieldIsEnum) { _%>
    @Enumerated(EnumType.STRING)
        <%_ }
        if (fieldType === 'byte[]') { _%>
    @Lob
        <%_ if ((prodDatabaseType === 'postgresql' || devDatabaseType === 'postgresql') && fieldTypeBlobContent === 'text' ) { _%>
    @Type(type = "org.hibernate.type.TextType")
        <%_ }
        }
        if (['Instant', 'ZonedDateTime', 'LocalDate', 'Duration'].includes(fieldType)) { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'BigDecimal') { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", precision = 21, scale = 2<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else if (fieldType === 'UUID' && ['mysql'].includes(prodDatabaseType)) { _%>
    @Type(type = "uuid-char")
    @Column(name = "<%-fieldNameAsDatabaseColumn %>", length = 36<% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %>)
        <%_ } else { _%>
    @Column(name = "<%-fieldNameAsDatabaseColumn %>"<% if (fieldValidate === true) { %><% if (fieldValidateRules.includes('maxlength')) { %>, length = <%= fieldValidateRulesMaxlength %><% } %><% if (required) { %>, nullable = false<% } %><% if (unique) { %>, unique = true<% } %><% } %>)
        <%_ }
    } _%>
    <%_ if (fieldTypeBlobContent !== 'text') { _%>
    public <%= fieldType %> <%= fieldName %>;
    <%_ } else { _%>
     public String <%= fieldName %>;
    <%_ } _%>

    <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
      <%_ if (databaseType === 'sql') { _%>
    @Column
      <%_ } _%>
      <%_ if (databaseType === 'mongodb') { _%>

      <%_ } _%>
      public String <%= fieldName %>ContentType;

    <%_ }
    }

    for (idx in relationships) {
        const otherEntityRelationshipName = relationships[idx].otherEntityRelationshipName;
        const otherEntityRelationshipNamePlural = relationships[idx].otherEntityRelationshipNamePlural;
        const relationshipName = relationships[idx].relationshipName;
        const relationshipFieldName = relationships[idx].relationshipFieldName;
        const relationshipFieldNamePlural = relationships[idx].relationshipFieldNamePlural;
        const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
        const relationshipType = relationships[idx].relationshipType;
        const relationshipValidate = relationships[idx].relationshipValidate;
        const relationshipRequired = relationships[idx].relationshipRequired;
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        const ownerSide = relationships[idx].ownerSide;
        const isUsingMapsId = relationships[idx].useJPADerivedIdentifier;
        if (otherEntityRelationshipName) {
            mappedBy = otherEntityRelationshipName.charAt(0).toLowerCase() + otherEntityRelationshipName.slice(1)
        }
        if (typeof relationships[idx].javadoc != 'undefined') { _%>
<%- formatAsFieldJavadoc(relationships[idx].javadoc) %>
            <%_ if (!hasDto) { _%>
    @ApiModelProperty(value = "<%- formatAsApiDescription(relationships[idx].javadoc) %>")
            <%_ } _%>
    <%_ }
        if (relationshipType === 'one-to-many') {
            if (databaseType === 'sql') {
    _%>
    @OneToMany(mappedBy = "<%= otherEntityRelationshipName %>")
                <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.<% if (readOnly) { %>READ_ONLY<% } else { %>READ_WRITE<% } %>)
                <%_ } _%>
            <%_ } else if (databaseType === 'mongodb') {
            if (databaseType === 'mongodb') { _%>

        <%_ } _%>
    @Field("<%= relationshipFieldName %>")

    <%_ } _%>
    public Set<<%= asEntity(otherEntityNameCapitalized) %>> <%= relationshipFieldNamePlural %> = new HashSet<>();

    <%_ } else if (relationshipType === 'many-to-one') {
            if (databaseType === 'sql') {
    _%>
    @ManyToOne<% if (relationshipRequired) { %>(optional = false)<% } %>
    @JoinColumn(name = "<%= getColumnName(relationships[idx].relationshipName) %>_id")
        <%_ if (relationshipValidate) { _%>
    <%- include(fetchFromInstalledJHipster('entity-server/templates') + '/src/main/java/package/domain/relationship_validators', {
        idx: idx,
        relationships: relationships
    }) -%>
        <%_ }
    } else if (databaseType === 'mongodb') {
        if (databaseType === 'mongodb') { _%>

    <%_ } _%>
    @Field("<%= relationshipFieldName %>")
    }
    _%>
    @JsonbTransient
    public <%= asEntity(otherEntityNameCapitalized) %> <%= relationshipFieldName %>;

    <%_ } else if (relationshipType === 'many-to-many') {
        if (databaseType === 'sql') { _%>
    @ManyToMany<% if (ownerSide === false) { %>(mappedBy = "<%= otherEntityRelationshipNamePlural %>")<% } %>
            <%_ if (enableHibernateCache) { _%>
    @Cache(usage = CacheConcurrencyStrategy.<% if (readOnly) { %>READ_ONLY<% } else { %>READ_WRITE<% } %>)
            <%_ } _%>
        <%_ if (ownerSide === true) {
            if (relationshipValidate) { _%>
    <%- include(fetchFromInstalledJHipster('entity-server/templates') + '/src/main/java/package/domain/relationship_validators', {
        idx: idx,
        relationships: relationships
    }) -%>
        <%_ } _%>
    @JoinTable(name = "<%= joinTableName %>",
               joinColumns = @JoinColumn(name = "<%= getColumnName(name) %>_id", referencedColumnName = "id"),
               inverseJoinColumns = @JoinColumn(name = "<%= getColumnName(relationships[idx].relationshipName) %>_id", referencedColumnName = "id"))
        <%_ }
        } else if (databaseType === 'mongodb') {
            if (databaseType === 'mongodb') { _%>

        <%_ } _%>
    @Field("<%= relationshipFieldNamePlural %>")
         } if (ownerSide === false) { _%>
    <%_ } _%>
    @JsonbTransient
    public Set<<%= asEntity(otherEntityNameCapitalized) %>> <%= relationshipFieldNamePlural %> = new HashSet<>();

    <%_ } else {
        if (databaseType === 'sql') {
            if (ownerSide) { _%>
    @OneToOne<% if (relationshipRequired) { %>(optional = false)<% } %>
            <%_ if (relationshipValidate) { _%>
    <%- include(fetchFromInstalledJHipster('entity-server/templates') + '/src/main/java/package/domain/relationship_validators', {
        idx: idx,
        relationships: relationships
    }) -%>
            <%_ }_%>
            <%_ if (isUsingMapsId === true) { %>
    @MapsId
    @JoinColumn(name = "id")
            <%_ } else { _%>
    @JoinColumn(unique = true)
            <%_ } _%>
        <%_ } else { _%>
    @OneToOne(mappedBy = "<%= otherEntityRelationshipName %>")
    @JsonIgnore
        <%_ }
        } else if (databaseType === 'mongodb') {
            if (databaseType === 'mongodb') { _%>

        <%_ } _%>
    @Field("<%= relationshipFieldName %>")

            if (ownerSide === false) { _%>
    @com.fasterxml.jackson.annotation.JsonBackReference
    <%_     }
        } _%>
    public <%= asEntity(otherEntityNameCapitalized) %> <%= relationshipFieldName %>;

    <%_ }
    } _%>
    // jhipster-needle-entity-add-field - JHipster will add fields here, do not remove

    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof <%= asEntity(entityClass) %>)) {
            return false;
        }
        return id != null && id.equals(((<%= asEntity(entityClass) %>) o).id);
    }

    @Override
    public int hashCode() {
        return 31;
    }

    @Override
    public String toString() {
        return "<%= asEntity(entityClass) %>{" +
            "id=" + id +
            <%_ for (idx in fields) {
                const fieldType = fields[idx].fieldType;
                const fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
                const fieldName = fields[idx].fieldName;
                const fieldInJavaBeanMethod = fields[idx].fieldInJavaBeanMethod;
                const isNumeric = ['integer', 'long', 'float', 'double', 'bigdecimal'].includes(fieldType.toLowerCase()); _%>
            ", <%= fieldName %>=<% if (! isNumeric) {%>'<% } %>" + <%= fieldName %> <% if (! isNumeric) { %>+ "'" <% } %>+
                <%_ if ((fieldType === 'byte[]' || fieldType === 'ByteBuffer') && fieldTypeBlobContent !== 'text') { _%>
            ", <%= fieldName %>ContentType='" + <%= fieldName %>ContentType() + "'" +
                <%_ } _%>
            <%_ } _%>
            "}";
    }
<%_ if (!viaRepository) { _%>

<%- include('../_partials/imperative/common/persist', this) -%>

<%- include('../_partials/imperative/common/finders', this) -%>
<%_ } _%>
}
