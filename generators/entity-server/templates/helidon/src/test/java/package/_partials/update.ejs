
    @Test
    public void update<%= entityClass %>() {
        // Initialize the database
        <%= entityOrDtoInstance %> = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityOrDtoInstance %>)
            .when()
            .post("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(CREATED.getStatusCode())
            .extract().as(ENTITY_TYPE);

        var databaseSizeBeforeUpdate = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE)
            .size();

        // Get the <%= entityInstance %>
        var updated<%= entityOrDtoClass %> = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>/{id}", <%= entityOrDtoInstance %>.id)
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().body().as(ENTITY_TYPE);

        // Update the <%= entityInstance %>
        <%_ for (let idx = 0; idx < fields.length; idx++) { _%>
        updated<%= entityOrDtoClass %>.<%= fields[idx].fieldName %> = UPDATED_<%= fields[idx].fieldNameUnderscored.toUpperCase() %>;
        <%_ } _%>

        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(updated<%= entityOrDtoClass %>)
            .when()
            .put("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode());

        // Validate the <%= entityClass %> in the database
        var <%= entityOrDtoInstance %>List = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE);

        assertThat(<%= entityOrDtoInstance %>List).hasSize(databaseSizeBeforeUpdate);
        var test<%= entityOrDtoClass %> = <%= entityOrDtoInstance %>List.stream().filter(it -> updated<%= entityOrDtoClass %>.id.equals(it.id)).findFirst().get();
<%- include('./object_verification', {...this, prefix: 'UPDATED_'}); -%>
    }

    @Test
    public void updateNonExisting<%= entityClass %>() {
        var databaseSizeBeforeUpdate = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE)
            .size();

        // If the entity doesn't have an ID, it will throw BadRequestAlertException
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityOrDtoInstance %>)
            .when()
            .put("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(BAD_REQUEST.getStatusCode());

        // Validate the <%= entityClass %> in the database
        var <%= entityOrDtoInstance %>List = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            .extract().as(LIST_OF_ENTITY_TYPE);

        assertThat(<%= entityOrDtoInstance %>List).hasSize(databaseSizeBeforeUpdate);
    }
