
package <%= packageName %>.domain;

import static org.assertj.core.api.Assertions.assertThat;

import <%= packageName %>.TestUtil;
import org.junit.jupiter.api.Test;

<%_
let hasOauthUser = false;
for (idx in relationships) {
    isUsingMapsId = relationships[idx].useJPADerivedIdentifier === true;
    if (isUsingMapsId) {
        hasOauthUser = relationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2';
        break;
    }
}
_%>
<%_ if (databaseType === 'sql' && hasOauthUser === true) { _%>
import java.util.UUID;
<%_ } _%>

public class <%= entityClass %>Test {

    @Test
    public void equalsVerifier() throws Exception {
        TestUtil.equalsVerifier(<%= asEntity(entityClass) %>.class);
    <%_if (!embedded) { _%>
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>1 = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>1.id = <% if (databaseType === 'sql' && hasOauthUser === true) { %>UUID.randomUUID().toString()<% } else if (databaseType === 'sql') { %>1L<% } else if (databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { %>"id1"<% } else if (databaseType === 'cassandra') { %>UUID.randomUUID()<% } %>;
        <%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>2 = new <%= asEntity(entityClass) %>();
        <%= asEntity(entityInstance) %>2.id = <%= asEntity(entityInstance) %>1.id;
        assertThat(<%= asEntity(entityInstance) %>1).isEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>2.id = <% if (databaseType === 'sql' && hasOauthUser === true) { %>UUID.randomUUID().toString()<% } else if (databaseType === 'sql') { %>2L<% } else if (databaseType === 'mongodb' || databaseType === 'neo4j' || databaseType === 'couchbase') { %>"id2"<% } else if (databaseType === 'cassandra') { %>UUID.randomUUID()<% } %>;
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
        <%= asEntity(entityInstance) %>1.id = null;
        assertThat(<%= asEntity(entityInstance) %>1).isNotEqualTo(<%= asEntity(entityInstance) %>2);
    <%_} _%>
    }
}
