
    @Test
    public void get<%= entityClass %>() {
        // Initialize the database
        <%= entityOrDtoInstance %> = given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .contentType(APPLICATION_JSON)
            .accept(APPLICATION_JSON)
            .body(<%= entityOrDtoInstance %>)
            .when()
            .post("/api/<%= entityApiUrl %>")
            .then()
            .statusCode(CREATED.getStatusCode())
            .extract().as(ENTITY_TYPE);

        var response = // Get the <%= entityInstance %>
            given()
                .auth()
                .preemptive()
                .oauth2(adminToken)
                .accept(APPLICATION_JSON)
                .when()
                .get("/api/<%= entityApiUrl %>/{id}", <%= entityOrDtoInstance %>.id)
                .then()
                .statusCode(OK.getStatusCode())
                .contentType(APPLICATION_JSON)
                .extract().as(ENTITY_TYPE);

        // Get the <%= entityInstance %>
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            .get("/api/<%= entityApiUrl %>/{id}", <%= entityOrDtoInstance %>.id)
            .then()
            .statusCode(OK.getStatusCode())
            .contentType(APPLICATION_JSON)
            <%_
                let idValueTransformer = '';
                if (primaryKeyType === 'Long') {
                    idValueTransformer = '.intValue()';
                } else if (primaryKeyType === 'UUID') {
                    idValueTransformer = '.toString()';
                }
            _%>
            .body("id", is(<%= entityOrDtoInstance %>.id<%= idValueTransformer %>))
            <% for (let idx = 0; idx < fields.length; idx++) {
                const fieldName = fields[idx].fieldName;
                const fieldType = fields[idx].fieldType;
                let expected = 'DEFAULT_' + fields[idx].fieldNameUnderscored.toUpperCase();
                let assertionMethod = 'is';
                if (fieldType === 'Integer' || fieldType === 'Long') {
                    expected = `${expected}.intValue()`;
                } else if (fieldType === 'Float' || fieldType === 'Double') {
                    expected = `${expected}.doubleValue()`;
                } else if (fieldType === 'BigDecimal') {
                    assertionMethod = 'comparesEqualTo';
                    expected = `${expected}.floatValue()`;
                } else if (fieldType === 'Boolean') {
                    expected = `${expected}.booleanValue()`;
                } else if (fieldType === 'Instant' || fieldType === 'ZonedDateTime' || fieldType === 'LocalDate') {
                    expected = `TestUtil.formatDateTime(${expected})`;
                } else if (fieldType !== 'String') {
                    expected = `${expected}.toString()`;
                }
                %>
                .body("<%= fields[idx].fieldName %>", <%= assertionMethod %>(<%= expected %>))<% } %>;
    }

    @Test
    public void getNonExisting<%= entityClass %>() {
        // Get the <%= entityInstance %>
        given()
            .auth()
            .preemptive()
            .oauth2(adminToken)
            .accept(APPLICATION_JSON)
            .when()
            <%_
                let nonExistingId = 'UNKNOWN';
                if (['Long', 'String'].includes(primaryKeyType)) {
                    nonExistingId = 'Long.MAX_VALUE';
                } else if (primaryKeyType === 'UUID') {
                    nonExistingId = 'UUID.randomUUID().toString()';
                }
            _%>
            .get("/api/<%= entityApiUrl %>/{id}", <%= nonExistingId %>)
            .then()
            .statusCode(NOT_FOUND.getStatusCode());
    }
